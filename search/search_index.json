{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u043c","text":""},{"location":"lab1/","title":"Home","text":"<p>Home page - nothing interesting here</p>"},{"location":"lab1/task_1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</p>"},{"location":"lab1/task_1/#_1","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_1/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\n# HEADERSIZE = 4\n# AF_INET - IPv4\n# SOCK_STREAM - TCP\n#  SOCK_DGRAM - UDP\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    server_socket.bind(('localhost', 2003))\n\n    while True:\n        data, client_address = server_socket.recvfrom(1234)\n        if data:\n            message = data.decode('utf-8')\n            print(f\"Received message from {client_address}: {message}\")\n            server_msg = \"Hello client!\"\n            server_socket.sendto(server_msg.encode(\"utf-8\"), client_address)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_1/#_3","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>import socket\n\n\ndef send_and_receive_message():\n    client_s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    server_address = ('localhost', 2003)\n    msg_to_server = \"Hello, server!\"\n\n    try:\n        client_s.sendto(msg_to_server.encode('utf-8'), server_address)\n        response_from_server, _ = client_s.recvfrom(1234)\n        print(\"Response from server:\", response_from_server.decode(\"utf-8\"))\n    except Exception as e:\n        print(\"Error:\", str(e))\n    finally:\n        client_s.close()\n\n\nif __name__ == \"__main__\":\n    send_and_receive_message()\n</code></pre>"},{"location":"lab1/task_1/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab1/task_2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442 \u201c\u043f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438\u201d.</p>"},{"location":"lab1/task_2/#_1","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_2/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\n\n\ndef calculate_pythagoras(a, b):\n    return (a ** 2 + b ** 2) ** 0.5\n\n\ndef calculate_trapezoid_area(a, b, h):\n    return ((a + b) * h) / 2\n\n\ndef calculate_parallelogram_area(base, height):\n    return base * height\n\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((\"localhost\", 2003))\n    server_socket.listen(1)\n\n    print(\"Server is listening...\")\n\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Connection with {addr}\", )\n\n        data = client_socket.recv(1024).decode('utf-8')\n\n        if data:\n            try:\n                operation, *params = data.split(',')\n                if operation == \"1\":\n                    result = calculate_pythagoras(float(params[0]), float(params[1]))\n                elif operation == \"2\":\n                    result = calculate_trapezoid_area(float(params[0]), float(params[1]), float(params[2]))\n                elif operation == \"3\":\n                    result = calculate_parallelogram_area(float(params[0]), float(params[1]))\n                else:\n                    result = \"Wrong operation code\"\n            except Exception as e:\n                result = \"Error: \" + str(e)\n\n            client_socket.send(str(result).encode('utf-8'))\n            print(f\"Result for client equals {result}\")\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_2/#_3","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>import socket\n\n\ndef main():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((\"localhost\", 2003))\n\n    try:\n        operation = input(\n            \"Choose operation (1 - Pythagorean theorem, 2 - Trapezoid area, 3 - Parallelogram area): \")\n\n        if operation not in [\"1\", \"2\", \"3\"]:\n            print(\"Wrong operation code\")\n            return\n\n        params = input(\"Enter the operation parameters (separated by commas):\")\n\n        client_socket.send(f\"{operation},{params}\".encode('utf-8'))\n\n        result = client_socket.recv(1024).decode('utf-8')\n\n        print(\"Result:\", result)\n\n    except Exception as e:\n        print(\"Error:\", str(e))\n    finally:\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_2/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab1/task_3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"lab1/task_3/#_1","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_3/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\n\n\ndef get_response_html():\n    try:\n        with open(\"index.html\", \"r\") as file:\n            html_content = file.read()\n    except FileNotFoundError:\n        html_content = \"&lt;html&gt;&lt;body&gt;&lt;h1&gt;File index.html isn't found&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\"\n\nresponse = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(html_content)}\\r\\n\\r\\n{html_content}\"\nreturn response\n\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((\"localhost\", 2003))\n    server_socket.listen(1)\n\n    print(f\"Server is running on http://localhost:2003\")\n\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Connection from {addr}\")\n\n        request = client_socket.recv(1024).decode('utf-8')\n\n        if request:\n            response = get_response_html()\n            client_socket.send(response.encode('utf-8'))\n\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_3/#_3","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>import socket\n\n\ndef main():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    try:\n        client_socket.connect((\"localhost\", 2003))\n\n        request = \"GET / HTTP/1.1\\r\\nHost: localhost\\r\\n\\r\\n\"\n        client_socket.send(request.encode('utf-8'))\n\n        response = client_socket.recv(1024).decode('utf-8')\n        print(response)\n\n    except Exception as e:\n        print(\"Error:\", str(e))\n    finally:\n        client_socket.close()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_3/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab1/task_4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p>"},{"location":"lab1/task_4/#_1","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_4/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\nimport threading\n\nclients = {}\nHOST = '127.0.0.1'\nPORT = 2003\n\n\ndef handle_client(client_socket, client_address):\n    try:\n        client_socket.send(\"Enter your name: \".encode('utf-8'))\n        client_name = client_socket.recv(1024).decode('utf-8')\n        welcome_message = f\"Hi, {client_name}! To exit the chat enter 'exit'.\"\n        client_socket.send(welcome_message.encode('utf-8'))\n        clients[client_name] = client_socket\n\n    while True:\n        message = client_socket.recv(1024).decode('utf-8')\n        if message == 'exit':\n            client_socket.send('exit'.encode('utf-8'))\n            del clients[client_name]\n            client_socket.close()\n            break\n        broadcast_message = f\"{client_name}: {message}\"\n        # \u0420\u0430\u0441\u0441\u044b\u043b\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\n        for client in clients.values():\n            client.send(broadcast_message.encode('utf-8'))\n\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n        client_socket.close()\n\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((HOST, PORT))\n    server_socket.listen(5)\n\n    print(f\"Server is running on {HOST}:{PORT}\")\n\n    while True:\n        client_socket, client_address = server_socket.accept()\n        print(f\"Connection is settled with {client_address}\")\n        client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))\n        client_thread.start()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_4/#_3","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430","text":"<pre><code>import socket\nimport threading\n\nHOST = '127.0.0.1'\nPORT = 2003\n\n\ndef receive_messages(client_socket):\n    while True:\n        message = client_socket.recv(1024).decode('utf-8')\n        if message == 'exit':\n            print(\"You've exited the cat.\")\n            break\n        print(message)\n\n\ndef main():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((HOST, PORT))\n\n    receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\n    receive_thread.start()\n\n    while True:\n        message = input()\n        client_socket.send(message.encode('utf-8'))\n        if message == 'exit':\n            break\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"lab1/task_4/#_4","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab1/task_5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0421\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442:</p> <ul> <li>\u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e   \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.</li> <li>\u0412\u044b\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435   html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</li> </ul>"},{"location":"lab1/task_5/#_1","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435","text":""},{"location":"lab1/task_5/#_2","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430","text":"<pre><code>import socket\nimport sys\n\n\nclass MyHTTPServer:\n    def __init__(self, host, port, server_name):\n        self._host = host\n        self._port = port\n        self._server_name = server_name\n        self.grades = []\n        self.subjects = []\n\n    def serve_forever(self):\n        serv_sock = socket.socket(\n            socket.AF_INET,  # IPv4\n            socket.SOCK_STREAM,\n            proto=0\n        )\n\n        try:\n            serv_sock.bind((self._host, self._port))\n            serv_sock.listen()\n\n            while True:\n                conn, _ = serv_sock.accept()\n                try:\n                    self.serve_client(conn)\n                except Exception as e:\n                    print('Client serving failed', e)\n        finally:\n            serv_sock.close()\n\n    def serve_client(self, conn):\n        try:\n            req = self.parse_request(conn)\n            if req.method == 'GET':\n                resp = self.handle_get_request(req)\n            elif req.method == 'POST':\n                resp = self.handle_post_request(req)\n            else:\n                resp = self.create_response(405, 'Method Not Allowed', 'Only GET and POST methods are supported.')\n\n            self.send_response(conn, resp)\n        except ConnectionResetError:\n            conn = None\n        except Exception as e:\n            self.send_error(conn, e)\n\n        if conn:\n            conn.close()\n\n    def parse_request(self, conn):\n        request_data = b''\n        while b'\\r\\n\\r\\n' not in request_data:\n            data = conn.recv(1024)\n            if not data:\n                break\n            request_data += data\n\n        if not request_data:\n            raise ValueError('Invalid request')\n\n        request_lines = request_data.decode('utf-8').split('\\r\\n')  # \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438\n        method, path, _ = request_lines[0].split(' ')  # \u0418\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u0430 \u0438 \u043f\u0443\u0442\u0438 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\n        headers = {}\n        for line in request_lines[1:]:\n            if ':' in line:\n                key, value = line.split(':', 1)\n                headers[key.strip()] = value.strip()\n\n        params = (\n            {p.split(\"=\")[0]: p.split(\"=\")[1] for p in path.split(\"?\")[1].split(\"&amp;\")}\n            if \"?\" in path\n            else None\n        )\n        print(params)\n\n        return HTTPRequest(method, path.split(\"?\")[0], headers, params)\n\n    def handle_get_request(self, req):\n        if req.path == '/':\n            response_body = '&lt;html&gt;&lt;body&gt;&lt;h1&gt;List of subjects&lt;/h1&gt;&lt;ul&gt;{}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;'\n            items = ''.join(\n                '&lt;li&gt;{} - {}&lt;/li&gt;'.format(subject, grade) for subject, grade in zip(self.subjects, self.grades))\n            print(self.subjects)\n            response_body = response_body.format(items)\n            return self.create_response(200, 'OK', response_body)\n        else:\n            return self.create_response(404, 'Not Found', 'Page not found')\n\n    def handle_post_request(self, req):\n        if req.path == '/record':\n            self.grades.append(req.params.get(\"grade\"))  # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n            self.subjects.append(req.params.get(\"subject\"))  # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n            print(self.subjects)\n            return self.create_response(200, 'OK', 'Record saved')\n        else:\n            return self.create_response(404, 'Not Found', 'Page not found')\n\n    def create_response(self, status_code, status_text, body):\n        response = f\"HTTP/1.1 {status_code} {status_text}\\r\\n\"\n        response += f\"Server: {self._server_name}\\r\\n\"\n        response += \"Content-Type: text/html\\r\\n\"\n\n        response += f\"Content-Length: {len(body)}\\r\\n\"\n        response += \"\\r\\n\"\n        response += body\n\n        return response.encode('utf-8')\n\n    def send_response(self, conn, resp):\n        conn.sendall(resp)\n\n    def send_error(self, conn, err):\n        error_message = f\"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\nError: {err}\"\n        conn.sendall(error_message.encode('utf-8'))\n\n\nclass HTTPRequest:\n    def __init__(self, method, path, headers, params):\n        self.method = method\n        self.path = path\n        self.headers = headers\n        self.params = params\n\n    def read_body(self, length):\n        body = b''\n        while len(body) &lt; length:\n            data = self.conn.recv(length - len(body))\n            if not data:\n                break\n            body += data\n\n        return body.decode('utf-8')\n\n\nif __name__ == '__main__':\n    host = 'localhost'\n    port = 8000\n    name = 'UselessStudentServer'\n\n    serv = MyHTTPServer(host, port, name)\n    print(\"Server listening on port\", port)\n    try:\n        serv.serve_forever()\n    except KeyboardInterrupt:\n        pass\n</code></pre>"},{"location":"lab1/task_5/#_3","title":"\u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u044b","text":""},{"location":"lab1/task_5/#_4","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","text":""},{"location":"lab2/task_1/","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f\u043c\u0438 \u043d\u0430 Django","text":""},{"location":"lab2/task_1/#1","title":"1. \u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u0426\u0435\u043b\u044c\u044e \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0435\u0442\u044c\u044e \u043e\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 Django. \u0421\u0435\u0440\u0432\u0438\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f, \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439, \u0434\u0435\u043b\u0430\u0442\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u044b \u0438 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0437\u0430 \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.</p>"},{"location":"lab2/task_1/#2","title":"2. \u041a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c \u0440\u0430\u0431\u043e\u0442\u0430","text":"<ul> <li>\u041d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430: \u0421\u043e\u0437\u0434\u0430\u043d \u043f\u0440\u043e\u0435\u043a\u0442 Django \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c <code>my_hotel</code> \u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 Django \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c <code>hotels</code>.</li> <li>\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439: \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u043c\u043e\u0434\u0435\u043b\u0438 \u0432 <code>models.py</code> \u0434\u043b\u044f <code>Owner</code> (\u0412\u043b\u0430\u0434\u0435\u043b\u0435\u0446), <code>Hotel</code> (\u041e\u0442\u0435\u043b\u044c), <code>RoomType</code> (\u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b), <code>Room</code> (\u041a\u043e\u043c\u043d\u0430\u0442\u0430), <code>Reservation</code> (\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435) \u0438 <code>Review</code> (\u041e\u0442\u0437\u044b\u0432).</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438, \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0442\u0435\u043b\u0435\u0439, \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0433\u043e\u0441\u0442\u0435\u0439 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.</li> <li>\u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 URL: \u0421\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0448\u0430\u0431\u043b\u043e\u043d\u044b URL \u0441 \u0444\u0443\u043d\u043a\u0446\u0438\u044f\u043c\u0438 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432 <code>urls.py</code>.</li> <li>\u0428\u0430\u0431\u043b\u043e\u043d\u044b: \u0421\u043e\u0437\u0434\u0430\u043d\u044b HTML-\u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0421\u0442\u0438\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u044b \u0441\u0442\u0438\u043b\u0438 CSS \u0434\u043b\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u0438\u0441\u0442\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u0438\u0437\u0430\u0439\u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u043d\u0438\u0446.</li> <li>\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439: \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 Django \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430.</li> <li>\u0414\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435: \u0412\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f URL \u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u0445 \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438.</li> </ul>"},{"location":"lab2/task_1/#3","title":"3. \u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430","text":""},{"location":"lab2/task_1/#modelspy","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0438\u0437 models.py","text":"<pre><code>class Hotel(models.Model):\n    # ... \u043f\u043e\u043b\u044f ...\n    def __str__(self):\n        return str(self.name) + \" \u0432 \" + str(self.address)\n</code></pre>"},{"location":"lab2/task_1/#viewspy","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0438\u0437 views.py","text":"<pre><code>def hotel_list(request):\n    hotels = Hotel.objects.all()\n    return render(request, 'hotel_list.html', {'hotels': hotels})\n</code></pre>"},{"location":"lab2/task_1/#hotel_listhtml","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0438\u0437 hotel_list.html","text":"<pre><code>{% for hotel in hotels %}\n    &lt;li&gt;&lt;a href=\"{% url 'room_reserve' hotel.id %}\"&gt;{{ hotel.name }}&lt;/a&gt;&lt;/li&gt;\n{% endfor %}\n</code></pre>"},{"location":"lab2/task_1/#urlspy","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0438\u0437 urls.py","text":"<pre><code>urlpatterns = [\n    path('hotels/', views.hotel_list, name='hotel_list'),\n    # ... \u0434\u0440\u0443\u0433\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u044b ...\n]\n</code></pre>"},{"location":"lab2/task_1/#4","title":"4. \u041a\u0440\u0430\u0442\u043a\u0438\u0439 \u0432\u044b\u0432\u043e\u0434","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0431\u044b\u043b\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u044f \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 Django \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u0435\u0433\u043e \u043c\u043e\u0449\u043d\u0443\u044e ORM \u0434\u043b\u044f \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445. \u0422\u0435\u043f\u0435\u0440\u044c, \u043a\u043e\u0433\u0434\u0430 \u0443 \u043d\u0430\u0441 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0430 \u043d\u0430\u0434\u0435\u0436\u043d\u0430\u044f \u0431\u0430\u0437\u0430, \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441 \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442 \u043b\u0435\u0433\u043a\u0443\u044e \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044e, \u0434\u0435\u043b\u0430\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043e\u043f\u044b\u0442 \u043f\u043b\u0430\u0432\u043d\u044b\u043c \u0438 \u0438\u043d\u0442\u0443\u0438\u0442\u0438\u0432\u043d\u043e \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c. \u0412 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u0443\u044e \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e \u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043e\u0442\u0435\u043b\u0435\u0439, \u0438\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044e \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0448\u043b\u044e\u0437\u0430\u043c\u0438 \u0434\u043b\u044f \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</p>"},{"location":"lab3/","title":"Animals API Endpoints","text":""},{"location":"lab3/#list-animals","title":"List Animals","text":"<p><code>GET /system/animals/</code> Returns a list of all animals.</p>"},{"location":"lab3/#permissions","title":"Permissions","text":"<p>Authenticated Users: Can view the list of animals. Admin Users: Can view the list of animals.</p>"},{"location":"lab3/#retrieve-animal","title":"Retrieve Animal","text":"<p><code>GET /system/animals/{id}/</code> Retrieves a specific animal by ID.</p>"},{"location":"lab3/#permissions_1","title":"Permissions","text":"<p>Authenticated Users: Can view the animal details. Admin Users: Can view the animal details.</p>"},{"location":"lab3/#animals-in-lease","title":"Animals In Lease","text":"<p><code>GET /system/animals/animals_in_lease/</code> Returns a list of animals that are currently in lease.</p>"},{"location":"lab3/#permissions_2","title":"Permissions","text":"<p>Authenticated Users: Can view the list of animals in lease. Admin Users: Can view the list of animals in lease.</p>"},{"location":"lab3/#animals-in-communal-cages","title":"Animals In Communal Cages","text":"<p><code>GET /system/animals/animals_in_communas/</code> Returns a list of animals that are in communal cages.</p>"},{"location":"lab3/#permissions_3","title":"Permissions","text":"<p>Authenticated Users: Can view the list of animals in communal cages. Admin Users: Can view the list of animals in communal cages.</p>"},{"location":"lab3/#animals-leaving-together","title":"Animals Leaving Together","text":"<p><code>GET /system/animals/{id}/leaving_together/</code> Returns a list of animals leaving together in the same area as the animal with the specified ID.</p>"},{"location":"lab3/#permissions_4","title":"Permissions","text":"<p>Authenticated Users: Can view the list of animals leaving together. Admin Users: Can view the list of animals leaving together.</p>"},{"location":"lab3/#retrieve-area","title":"Retrieve Area","text":"<p><code>GET /system/locations/{id}/</code> Retrieves a specific area by ID.</p>"},{"location":"lab3/#permissions_5","title":"Permissions","text":"<p>Authenticated Users: Can view the area details. Admin Users: Can view the area details.</p> <p>...</p>"},{"location":"lab3/#cage-api-endpoints","title":"Cage API Endpoints","text":""},{"location":"lab3/#list-cages","title":"List Cages","text":"<p><code>GET /system/locations/cage/</code> Returns a list of all cages.</p>"},{"location":"lab3/#permissions_6","title":"Permissions","text":"<p>Authenticated Users: Can view the list of cages. Admin Users: Can view the list of cages.</p>"},{"location":"lab3/#retrieve-cage","title":"Retrieve Cage","text":"<p><code>GET /system/locations/cage/{id}/</code> Retrieves a specific cage by ID.</p>"},{"location":"lab3/#permissions_7","title":"Permissions","text":"<p>Authenticated Users: Can view the cage details. Admin Users: Can view the cage details.</p> <p>...</p>"},{"location":"lab3/#diet-api-endpoints","title":"Diet API Endpoints","text":""},{"location":"lab3/#list-diets","title":"List Diets","text":"<p><code>GET /system/food/diets/</code> Returns a list of all diets.</p>"},{"location":"lab3/#permissions_8","title":"Permissions","text":"<p>Authenticated Users: Can view the list of diets. Admin Users: Can view the list of diets.</p>"},{"location":"lab3/#retrieve-diet","title":"Retrieve Diet","text":"<p><code>GET /system/food/diets/{id}/</code> Retrieves a specific diet by ID.</p>"},{"location":"lab3/#permissions_9","title":"Permissions","text":"<p>Authenticated Users: Can view the diet details. Admin Users: Can view the diet details.</p> <p>...</p>"},{"location":"lab3/#habitat-api-endpoints","title":"Habitat API Endpoints","text":""},{"location":"lab3/#list-habitats","title":"List Habitats","text":"<p><code>GET /system/habitats/</code> Returns a list of all habitats.</p>"},{"location":"lab3/#permissions_10","title":"Permissions","text":"<p>Authenticated Users: Can view the list of habitats. Admin Users: Can view the list of habitats.</p>"},{"location":"lab3/#retrieve-habitat","title":"Retrieve Habitat","text":"<p><code>GET /system/habitats/{id}/</code> Retrieves a specific habitat by ID.</p>"},{"location":"lab3/#permissions_11","title":"Permissions","text":"<p>Authenticated Users: Can view the habitat details. Admin Users: Can view the habitat details.</p> <p>...</p>"},{"location":"lab3/#winter-place-api-endpoints","title":"Winter Place API Endpoints","text":""},{"location":"lab3/#list-winter-places","title":"List Winter Places","text":"<p><code>GET /system/animals/winterp-laces/</code> Returns a list of all winter places.</p>"},{"location":"lab3/#permissions_12","title":"Permissions","text":"<p>Authenticated Users: Can view the list of winter places. Admin Users: Can view the list of winter places.</p>"},{"location":"lab3/#retrieve-winter-place","title":"Retrieve Winter Place","text":"<p><code>GET /system/animals/winterp-laces/{id}/</code> Retrieves a specific winter place by ID.</p>"},{"location":"lab3/#permissions_13","title":"Permissions","text":"<p>Authenticated Users: Can view the winter place details. Admin Users: Can view the winter place details.</p> <p>...</p>"},{"location":"lab3/#animal-in-cage-api-endpoints","title":"Animal In Cage API Endpoints","text":""},{"location":"lab3/#list-animals-in-cages","title":"List Animals in Cages","text":"<p><code>GET /system/locations/locations/</code> Returns a list of all animal-cage relations.</p>"},{"location":"lab3/#permissions_14","title":"Permissions","text":"<p>Authenticated Users: Can view the list of animal-cage relations. Admin Users: Can view the list of animal-cage relations.</p>"},{"location":"lab3/#retrieve-animal-in-cage","title":"Retrieve Animal In Cage","text":"<p><code>GET /system/locations/locations/{id}/</code> Retrieves a specific animal-cage relation by ID.</p>"},{"location":"lab3/#permissions_15","title":"Permissions","text":"<p>Authenticated Users: Can view the animal-cage relation details. Admin Users: Can view the animal-cage relation details.</p> <p>...</p>"},{"location":"lab3/#additional-custom-actions","title":"Additional Custom Actions","text":""},{"location":"lab3/#show-empty-cages","title":"Show Empty Cages","text":"<p><code>GET /system/locations/cage/show_empty/</code> Returns a list of cages that are currently empty.</p>"},{"location":"lab3/#permissions_16","title":"Permissions","text":"<p>Authenticated Users: Can view the list of empty cages. Admin Users: Can view the list of empty cages.</p>"},{"location":"lab3/#animals-in-a-specific-area","title":"Animals In a Specific Area","text":"<p><code>GET /system/animals/animals_in/</code> Returns a count of animals in each area.</p>"},{"location":"lab3/#permissions_17","title":"Permissions","text":"<p>Authenticated Users: Can view the count of animals in areas. Admin Users: Can view the count of animals in areas.</p>"},{"location":"lab4/task_1/","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0437\u043e\u043e\u043f\u0430\u0440\u043a\u0430 Django + React","text":""},{"location":"lab4/task_1/#1","title":"1. \u0417\u0430\u0434\u0430\u0447\u0430","text":"<p>\u0426\u0435\u043b\u044c\u044e \u0431\u044b\u043b\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js - \u0432 \u043c\u043e\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e React.</p>"},{"location":"lab4/task_1/#2","title":"2. \u041a\u0430\u043a \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u043b\u0430\u0441\u044c \u0440\u0430\u0431\u043e\u0442\u0430","text":"<p>\u0411\u044b\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b \u043d\u043e\u0432\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0435 \u0437\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u0430\u043a\u043a\u0430\u0443\u043d\u0442\u043e\u043c \u044e\u0437\u0435\u0440\u0430 - \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0441\u043f\u0435\u0440\u0432\u0430 \u043f\u0440\u0438\u0448\u043b\u043e\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u044e\u0437\u0435\u0440\u0430 - \u0431\u044b\u043b\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0430 \u043d\u0435\u0445\u0438\u0442\u0440\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043a\u043e\u0440\u0441\u043e\u0432 \u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e vite \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0442\u0435\u043c\u043f\u043b\u0435\u0439\u0442\u0430 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438. \u041d\u0430 \u0444\u0440\u043e\u043d\u0442-\u044d\u043d\u0434\u0435 \u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a \u043c\u043e\u0435\u043c\u0443 django \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u043b \u043d\u0435\u043c\u043d\u043e\u0433\u043e ui \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0434\u043b\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u043e\u0442\u0437\u044b\u0432\u0447\u0438\u0432\u043e\u0441\u0442\u0438 \u0438 \u043f\u0440\u0438\u044f\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u0430\u0439\u0442\u043e\u043c - \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d react-toastify \u0434\u043b\u044f \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0431 \u0443\u0441\u043c\u0435\u0448\u043d\u043e\u0441\u0442\u0438 \u0435\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0438\u0439. \u0422\u0430\u043a\u0436\u0435 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0442\u0430\u043a\u0438\u0435 \u0431\u0438\u0431\u0438\u043e\u0442\u0435\u043a\u0438 \u043a\u0430\u043a react-router-dom \u0438 redux - \u043f\u0435\u0440\u0432\u0430\u044f \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430\u043c, \u0430 \u0432\u0442\u043e\u0440\u0430\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0442\u0435\u0439\u0442\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0432 \u043c\u043e\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u044d\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043b\u043e\u0433\u0438\u043d\u0435\u043d\u043d\u043e\u0433\u043e \u044e\u0437\u0435\u0440\u0430.</p>"},{"location":"lab4/task_1/#3","title":"3. \u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430","text":""},{"location":"lab4/task_1/#_1","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u0440\u0430\u0443\u0442\u0438\u043d\u0433\u0430:","text":"<pre><code>&lt;&gt;\n      &lt;Router&gt;\n        &lt;Nav /&gt;\n        &lt;Routes&gt;\n          &lt;Route path='/' element={&lt;HomePage /&gt;} /&gt;\n          &lt;Route path='/login' element={&lt;LoginPage /&gt;} /&gt;\n          &lt;Route path='/register' element={&lt;RegisterPage /&gt;} /&gt;\n          &lt;Route path='/reset-password' element={&lt;ResetPasswordPage /&gt;} /&gt;\n          &lt;Route path='/activate/:uid/:token' element={&lt;ActivatePage /&gt;} /&gt;\n          &lt;Route\n            path='/password/reset/confirm/:uid/:token'\n            element={&lt;ResetPasswordPageConfirm /&gt;}\n          /&gt;\n          &lt;Route path='/dashboard' element={&lt;Dashboard /&gt;} /&gt;\n          &lt;Route path='*' element={&lt;NotFoundPage /&gt;} /&gt;\n        &lt;/Routes&gt;\n      &lt;/Router&gt;\n      &lt;ToastContainer /&gt;\n    &lt;/&gt;\n</code></pre>"},{"location":"lab4/task_1/#_2","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:","text":"<pre><code>const register = async (userData) =&gt; {\n  const config = {\n    headers: {\n      'Content-type': 'application/json',\n    },\n  }\n\n  const response = await axios.post(REGISTER_URL, userData, config)\n\n  return response.data\n}\n\n\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (userData, thunkAPI) =&gt; {\n    try {\n      return await authService.register(userData)\n    } catch (error) {\n      const message =\n        (error.response &amp;&amp;\n          error.response.data &amp;&amp;\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n</code></pre>"},{"location":"lab4/task_1/#_3","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438:","text":"<pre><code>const login = async (userData) =&gt; {\n  const config = {\n    headers: {\n      'Content-type': 'application/json',\n    },\n  }\n\n  const response = await axios.post(LOGIN_URL, userData, config)\n\n  if (response.data) {\n    localStorage.setItem('user', JSON.stringify(response.data))\n  }\n\n  return response.data\n}\n\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (userData, thunkAPI) =&gt; {\n    try {\n      return await authService.login(userData)\n    } catch (error) {\n      const message =\n        (error.response &amp;&amp;\n          error.response.data &amp;&amp;\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n</code></pre>"},{"location":"lab4/task_1/#_4","title":"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f:","text":"<pre><code>const handleSubmit = (e) =&gt; {\n    e.preventDefault()\n\n    if (password !== re_password) {\n      toast.error('Passwords do not match')\n    } else {\n      const userData = {\n        first_name,\n        last_name,\n        email,\n        password,\n        re_password,\n      }\n      dispatch(register(userData))\n    }\n  }\n</code></pre>"}]}